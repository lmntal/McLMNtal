/*
 *  peterson.lmn -- Peterson Mutual Exclusion Algorithm for N processes
 * 
 *  @author  Masato Gocho
 *  @data    2009.08.03
 *
 */

% property0: ??????????»ã??·ã??³ã????????»ã?????? å¸¸ã?1ä»¥ä??§ã???
% property1: å¿??, wait?¶æ????????¹ã???????????£ã????????§ã???????

in_cs(0).

init{
  p_num=2.
  init0 @@ p_num(P) :- int(P) |
           p_num(P,P).
  init1 @@ p_num(P,Q) :- P>0, R=P-1 |
           p_num(R,Q), pos(R,0), step(R,0), p{i(0), j(0), id(R), state=ncs}.
}.
finish_i @@
  init{p_num(0,P), $p, @p}/ :- int(P) |
  n(P), $p.

ncs2wait @@ % NCS: i=0; goto WAIT;  
  p{state(ncs),  i(I), $p} :- int(I) | 
  p{state(wait), i(0), $p}.

waitwait @@ % do:: i < N-1 -> 
  p{state(wait),    i(I), $p}, n(N) :- I<(N-1) |
  p{state(wait_s1), i(I), $p}, n(N).
wait_s1_ @@ %         pos[id] = i: 
  p{state(wait_s1), i(I), id(Id), $p}, pos(P,Q)  :- int(I), P=:=Id, int(Q) |
  p{state(wait_s2), i(I), id(Id), $p}, pos(P,I).
wait_s2_ @@ %         step[i] = id;
  p{state(wait_s2), i(I), id(Id), $p}, step(S,M) :- int(Id), S=:=I, int(M) |
  p{state(wait_s3), i(I), id(Id), $p}, step(S,Id).
wait_s3_ @@ %         j = 0;
  p{state(wait_s3), j(J), $p} :- int(J) |
  p{state(wait_s4), j(0), $p}.
wait_s4A @@ %         do :: j<N && j!=id && pos[j]<i    -> j++
  p{state(wait_s4), i(I), j(J), id(Id), $p}, pos(P,Q), n(N) :- J<N, J=\=Id, P=:=J, Q<I, J2=J+1 |
  p{state(wait_s4), i(I), j(J2),id(Id), $p}, pos(P,Q), n(N).
wait_s4B @@ %            :: j<N && j!=id && step[i]!=id -> j++
  p{state(wait_s4), i(I), j(J), id(Id), $p}, step(P,Q),n(N) :- J<N, J=\=Id, P=:=I, Q=\=Id, J2=J+1 |
  p{state(wait_s4), i(I), j(J2),id(Id), $p}, step(P,Q),n(N).
wait_s4C @@ %            :: j==id -> j++
  p{state(wait_s4), j(J), id(Id), $p} :- J=:=Id, J2=J+1 |
  p{state(wait_s4), j(J2),id(Id), $p}.
wait_s4D @@ %            :: j==N  -> i++; break; od
  p{state(wait_s4), i(I), j(J), $p}, n(N) :- J=:=N, I2=I+1 |
  p{state(wait),    i(I2),j(J), $p}, n(N).
wait2cs_ @@ %  :: i == N-1 -> in_cs++; goto CS; od;
  p{state(wait), i(I), $p}, n(N), in_cs(C) :- I=:=(N-1), D=C+1 |
  p{state(cs),   i(I), $p}, n(N), in_cs(D).

cs_2_ncs @@ % pos[id]=0; in_cs--; goto NonCritical;
  p{state(cs), id(Id), $p}, pos(P,Q), in_cs(C) :- P=:=Id, int(Q), D=C-1 |
  p{state(ncs),id(Id), $p}, pos(P,0), in_cs(D).